package block

import (
	"bytes"
	"encoding/hex"
	"github.com/copernet/copernicus/util"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestBlockEncodeAndDecode(t *testing.T) {
	rawBlockBytes, err := hex.DecodeString(rawBlock)
	if err != nil {
		t.Error("block decode string error:", err)
	}
	bk := NewBlock()
	err = bk.Decode(bytes.NewReader(rawBlockBytes))
	if err != nil {
		t.Error("block decode error:", err)
	}

	buf := bytes.NewBuffer(nil)
	bk.Encode(buf)

	if !bytes.Equal(buf.Bytes(), rawBlockBytes) {
		t.Error("block decode or encode error")
	}
}

var rawBlock = "00000020d2d497201d88978b326a12f04f609a6f1f1425ae63c46c8ac72a200000000000dd241423caab3" +
	"a32cdcd498a0762293787c3db01710812b901af822e2b019c5410afe05affff001d70baa7f70d0100000001000000000" +
	"0000000000000000000000000000000000000000000000000000000ffffffff0a031dc012055374617368ffffffff013" +
	"a945909000000001976a914014dc11b35cafe7605b4c1798a5b86efd788cff488ac000000000100000001638beec9048" +
	"16831ecedf21b52bce9ebaaaaf5a62d16f49afadd67e81ca18896010000006b483045022100bc09f7e40e250ea58886b" +
	"4cbbef0af3cd1399dc3d6f4efa39b9dcba0238ebd43022044ef348405c249ad5d011b0c049408a2bad5570752b9ae060" +
	"f0ce7df49ce3900412102610677658eb3e42480a7831f1b2bd1cc1a08c2dd0b3bac4f9359bc53abcc3cdeffffffff028" +
	"017b42c000000001976a914973281390f3f619240aea6a4ac83c6d66f27310a88acbbcb19fc100000001976a9149783a" +
	"a0311b08642fa7f948f943f65896fee1dfe88ac0000000001000000012f525b0f999dc3fdd88c11e15fddc363058bb0a" +
	"218afcad637246c3aaf0384d0010000006b483045022100e0fc6812c0452a0d6b0e545a52f673169ab8b4060bf92c8ff" +
	"a78bdae9b7ce86202200957438fc1b968521972860b0250fe99c0d34a5ab9d982e514392e17135986e9412102b79a765" +
	"8530b93bff0ac8cce2405709d4a275759eebebd2ecbdd1e99df59d3f9ffffffff02005ed0b2000000001976a91497328" +
	"1390f3f619240aea6a4ac83c6d66f27310a88acfefb53b20f0000001976a914684055d448d5ddbb7d0a9bd7714530d15" +
	"30b030388ac000000000100000001a2c202993e07c1338b2c533c07026351719eea6664c0fc91d247d87c55a56b65010" +
	"000006a473044022040deec3237417834d06d638cc21d9b159523eef933c5af03a4d38dc96e4a6832022057097797ad9" +
	"a8a829529d7f2fceb33996486544d0b2a97b74f9a8bffd6e8d201412102d0530214e535d0d876614f5bd56bd3864c0de" +
	"ba5cfb1bd7d2e0c7ade55c26d5bffffffff02006d7c4d000000001976a914e599d52fad1a14e131cf87b974c22a7f5b7" +
	"16c3988ac13bd92fe0f0000001976a914553b8f487223a08d7c479a01c642d9402aa9df2388ac0000000001000000014" +
	"472735abe0e2fc518c22ee9cdcfae16aa19ef95e2747bb0908534e283425304010000006a473044022065202424a1772" +
	"2fdcd1f5a59714f868f79bf826931259982e3f9d7df7712cef302205e7e777a8a40d95df68b0d97b3cbf6aabcfce28c2" +
	"9e4cf85e410b82df44282ea412102016df814408878d5e3c13e519410f5f9a891fccdfb95e44551e0d64680baaa5dfff" +
	"fffff02002f6859000000001976a914973281390f3f619240aea6a4ac83c6d66f27310a88ac5da404ab0f0000001976a" +
	"9141f8da373e69f1e49f86d86bb59ea5cdf9890d4f488ac000000000200000001fc0bd081dc9a9daced6c6c152bc90ad" +
	"6179573c67acfc40b87b15ad5e7f20321000000006b48304502210093cce9c7a810fdfacd4aed172d76760c4d92f1030" +
	"34bfaf0ce16288666ddb23b02206cac98ad42b8567cc56927e7285d1c60875173d79829cface41f7e239ce15f5841210" +
	"21ceeaa584a6caa1ac4e216a3c9968698431dfc7fb1dbb21d67da3e39b7fe7ea1ffffffff0248579700000000001976a" +
	"914e6bc4e1f385442c758e17202cdd79c8bc641057388ac88770730000000001976a9147556b583a57687569ec373fe2" +
	"ba4fa05ba97d3dc88ac000000000200000001d5f3754e50af548b56757a9dc67fa14f5e55ac65b35d8d90a8a108adabb" +
	"9921c00000000fc004730440220494cf3dbf3e92d7697036b45b22184eddaeaaa8fe141b1b0a04b0e48ab496ad802200" +
	"9261d3315e14bc726d92aaf912c0fab03dff9a99de4b631ee8f25a7b7b7bd3841473044022069f8cf897ae440293a8f2" +
	"6daef1307e3d42471499428fe27c6f776464b7a659b02205f9b608c3c3188f36a9ad9266c17878445d2e664940a44f8d" +
	"102ce88c50f5525414c695221031244244b82acbfb039aade81ec95270fa06a5ef12b05c89ef9577b6e06a2165a2102b" +
	"ec0af75e41a6eb69a60a2365fcf7a39fc7f3bf9cd6659d634ce90f550ccd3be2103a664b6d937b7595ed21e10c1df475" +
	"547d3a939b6cb3ee370e0b50f3b03de1d4653aeffffffff022834c6000000000017a9142cb15e5a3253d4ec085af2740" +
	"092d9b9cd132e1b8720a107000000000017a91487d2b8389e47570886b5428807dd74729601459c87000000000100000" +
	"001dad2eabbc4dcb7016de78fcf5ff2f98035c40dbc29eecf781b12598d1d964d6f010000006a473044022008e3a66be" +
	"ffa7e7e4f70ce706134f4e8cdb5aed2e4643d869efba5e521d5810702206dd1748852d19635ce68eede89a36e11a2b12" +
	"d60aa6fed966e9b73b883089fca4121036628f374303002c67f08ada8c40a58c624bd434b03ad78cc9b45db7bca13abc" +
	"6ffffffff02215f0800000000001976a9140b2cc2e408da8ddfd668051ea3c2780eed08691488acc66354e8000000001" +
	"976a914ff8e212df7aa268ecab07c25ba2a902c3a104d2988ac000000000100000001a362be576d6de5e96a87f0c98f7" +
	"214cac5c473aaae0904f800cc9e4c9f3927d8000000006b483045022100bd958123ee848a386a7904624d6fc44b156c8" +
	"020ca86986438c0d08322a0374402200b17d610f5fe314047e85495d0ea0a97da97ab9311ea92c5196ac3f058f279014" +
	"12102260a2da5bd253bab7d59b26245d5433c9d8d40e1746b1c0aacde4b446be6b9bdffffffff01d0120a00000000001" +
	"976a9145e4b41dc0e5d4485cb96c9ab33ecdf1c0882f97088ac00000000020000000154b1f5a434a325688cfc415d16b" +
	"c619f1b586d696a6754f9969c8e4f8823b91601000000fc004730440220500773d0156b757d0d9fa89fbd1dbc18e93ad" +
	"4d7a5d040455982d3024c105cd1022069f5410f3c48370aa8b3aa455c6eac16c4ecdf8aefadb011fb8d09d31d5a0be14" +
	"1473044022015b69b1ef1fe8c5bce178d2658a5cc083e0767334ba31c9877075450bd5776cc0220385ddf84c8c6b98cf" +
	"c3f54337cee22ff768437fcbe589ad5085f45dd939d62c9414c69522103369c639629aca3aa766357605e1068e2fbb40" +
	"b384078914337e170147cfff7ac2103c81cd7d6ae26365e47d27e5e2e518fa5d8ec03d74099700306c53814ee81b3a62" +
	"10302dfa8fa41b12b6fa0b303688c74075257268ac9fdc0fccf045e2dc82197977953aeffffffff0224b6b0010000000" +
	"017a9141dd9d0bcba836b622380dd29b085d4e649e270bd8720a107000000000017a91417728f8a98a2570206e4b694f" +
	"795537e83eb1dab87000000000200000001af8f31830dfe6b995fb4d9b049e08f24499dba2c4c88e123b89fd747d38e7" +
	"87701000000fdfd0000483045022100b1b760aaa6da75b39e54963964de2f3b6b595ad806ed28e06249501c2c754cc40" +
	"2204310dbd4cfd911fc894ffb5978415ae3a6a3a3e12aa3e9b9812de6975ca4f56941473044022068a4c70f055a8b5ea" +
	"6cafaecd9d859446996a0c635a16aa2277775e8bb3bf24202205c04989ff0406842a58321e3027d2f3cfe2bd3c89eafe" +
	"46d5b8cf7c1ba51e510414c6952210375d7c73312190fb684a1a8503f1e2425b65c378d90cf78afbc4649610aa12b552" +
	"10213ecf12ca62a20e24b43034d94de4834fe8d6dc0840b5a18198eabe8ddacf924210303db7b1dce172c8374bc60aa6" +
	"9b521ee085974bb3400b4aaacea3194f2fd891a53aeffffffff023ed267000000000017a914eb68fcaf46aaa51633a32" +
	"e571201e1c9d3ad6a608720a107000000000017a91497a154bfc1d7615350824234aa20957ca03694a58700000000020" +
	"0000001211d24f99cd2363cdea5ef35c9dcc8a684d6af9e72b2c316845a160121fca34801000000fdfe0000483045022" +
	"100fa2ec8c211f53f0584718eb7e62bab3f7e4b61d57011f716162f783ce0de2f150220636434276a62c7c1dd52979a0" +
	"21787e0f11b5bc5869c1aa9d6abb63d785961dd41483045022100c9e4b23ecaaa883c22cb2d20efee865157702692a1a" +
	"5750c938cbf2579549cee022056cdc207d5973932691a8da0d8c4c280617ce1732131fb2c61dd16d92b173590414c695" +
	"22102dd0c52f8d0ca7ac4736ff76e4b6792e6485e4c8f3315e7a63167b7b8539bdad02102e71215762a87ddacaa3e5ca" +
	"ca35ee344d6a6fb6046ac5c696f4c450d35df618d210359136b8b8a634137fd3a6f551cd430dad7c2b6090b8e9926a26" +
	"cdf22fb84ab3853aeffffffff0220a107000000000017a914815dcaf56882faebedf3276afb844175e05a472b87e869a" +
	"3000000000017a914674180180e4dc8da9db13380c825fbf13afcc1d7870000000002000000016f6b3c5ebb7d17ef5de" +
	"437c4353c4fcdb4239ef861f096617de59f333e8b126f00000000fdfe0000483045022100e2d0ce0331fdb68e5b76a2d" +
	"6c057e5e2824f1af15f291ce19f026d9e0bd76e4802204b7b5d2f110f21d0f3af4af9084806a23998d06656f409df75c" +
	"f914b8c7d7f0b41483045022100c9af15c6f16fa4b48e94107eda39e2a8612e8cab71b42f15cd34a4fa71f1e95802200" +
	"4503ecde4e2f1fe50b8d69ba067f3aa43ca6e3b297b923bddb310743de6c4ef414c6952210224a085fbf8fc865ba3615" +
	"ef241d934ce5d4a77ec91354619918904d4736aea5321025aa42d04c961352c9e4614ff3662e8ad8261c47f1ad98353" +
	"1354f156516f20122103d178e289d93cf13cad072c34245beb2946522fddb6fe900fe9d1107f2137e96a53aefffffff" +
	"f026c4100000000000017a914464d99892db654911b87d5c188071ac76b571c4187ca4907000000000017a914bf65f7" +
	"e9f560f9030904efa760352f7f5aeeff9d8700000000"

func TestBlockSerialize(t *testing.T) {
	blk1 := NewRegTestGenesisBlock()
	blk2 := NewBlock()
	buf1 := bytes.NewBuffer(nil)
	buf2 := bytes.NewBuffer(nil)

	err := blk1.Serialize(buf1)
	assert.Nil(t, err)
	assert.Equal(t, blk1.SerializeSize(), blk1.EncodeSize())
	blk1Data := buf1.Bytes()

	// check new block serialize size
	err = blk2.Unserialize(buf1)
	assert.Nil(t, err)
	assert.Equal(t, blk1.SerializeSize(), blk2.SerializeSize())

	err = blk2.Serialize(buf2)
	assert.Nil(t, err)
	blk2Data := buf2.Bytes()

	// check normal block serialize
	assert.Equal(t, blk1Data, blk2Data)
	assert.Equal(t, blk1.GetHash(), blk2.GetHash())

	// check empty block serialize
	buf2.Reset()
	blk2.SetNull()
	err = blk2.Serialize(buf2)
	assert.Nil(t, err)

	blk1.Unserialize(buf2)
	assert.Equal(t, blk1.GetHash(), NewBlock().GetHash())
}

func TestCreateGenesisBlock(t *testing.T) {
	tests := []struct {
		name        string
		block       *Block
		genesisHash string
		merkleRoot  string
	}{
		{
			name:        "NewGenesisBlock",
			block:       NewGenesisBlock(),
			genesisHash: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
			merkleRoot:  "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
		},
		{
			name:        "NewTestNetGenesisBlock",
			block:       NewTestNetGenesisBlock(),
			genesisHash: "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
			merkleRoot:  "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
		},
		{
			name:        "NewRegTestGenesisBlock",
			block:       NewRegTestGenesisBlock(),
			genesisHash: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
			merkleRoot:  "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
		},
	}
	for _, test := range tests {
		genesisHash, _ := util.GetHashFromStr(test.genesisHash)
		blockHash := test.block.GetHash()
		if !blockHash.IsEqual(genesisHash) {
			t.Errorf("Test %s fail, hash:%s", test.name, blockHash.String())
		}
		genesisMerkleRoot, _ := util.GetHashFromStr(test.merkleRoot)
		blockMerkleRoot := test.block.GetBlockHeader().MerkleRoot
		if !blockMerkleRoot.IsEqual(genesisMerkleRoot) {
			t.Errorf("Test %s fail, merkle root:%s", test.name, blockMerkleRoot.String())
		}
	}
}
